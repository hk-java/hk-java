package com.muecode.insurance.smartcontract.travel.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.9.4.
 */
@SuppressWarnings("rawtypes")
public class TravelInsuranceFactory extends Contract {
    public static final String BINARY = "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613820806100606000396000f3fe6080604052600436106200007a5760003560e01c8063712bf5d71162000055578063712bf5d71462000113578063942d361d1462000143578063be8af9aa1462000173578063ef147ef814620001a3576200007a565b8063051e280e146200007f578063481c6a75146200009f5780636f9c8bbb14620000cf575b600080fd5b6200009d600480360381019062000097919062000fe1565b620001d1565b005b348015620000ac57600080fd5b50620000b7620005c1565b604051620000c69190620010c0565b60405180910390f35b348015620000dc57600080fd5b50620000fb6004803603810190620000f59190620010dd565b620005e5565b6040516200010a919062001230565b60405180910390f35b3480156200012057600080fd5b506200012b620006a7565b6040516200013a91906200159a565b60405180910390f35b3480156200015057600080fd5b506200015b620009b9565b6040516200016a919062001230565b60405180910390f35b3480156200018057600080fd5b506200018b62000aa2565b6040516200019a9190620016f9565b60405180910390f35b348015620001b057600080fd5b50620001cf6004803603810190620001c991906200171d565b62000bbb565b005b600060056000858152602001908152602001600020604051806080016040529081600082015481526020016001820180546200020d90620017c7565b80601f01602080910402602001604051908101604052809291908181526020018280546200023b90620017c7565b80156200028c5780601f1062000260576101008083540402835291602001916200028c565b820191906000526020600020905b8154815290600101906020018083116200026e57829003601f168201915b505050505081526020016002820154815260200160038201548152505090506000816040015111620002f5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002ec906200185d565b60405180910390fd5b806040015134146200033e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200033590620018cf565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc82604001519081150290604051600060405180830381858888f19350505050158015620003a9573d6000803e3d6000fd5b50600081600001518260200151858560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff163387604001518860600151604051620003f29062000d85565b6200040598979695949392919062001943565b604051809103906000f08015801562000422573d6000803e3d6000fd5b509050600062000433858562000d0e565b90506001829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600281604051620004aa919062001a28565b9081526020016040518091039020829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000620005f5848462000d0e565b905060028160405162000609919062001a28565b90815260200160405180910390208054806020026020016040519081016040528092919081815260200182805480156200069957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116200064e575b505050505091505092915050565b620006b162000d93565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905067ffffffffffffffff81111562000712576200071162000e9a565b5b6040519080825280602002602001820160405280156200074f57816020015b6200073b62000dad565b815260200190600190039081620007315790505b50905060005b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050811015620008d2576000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110620007f657620007f562001a41565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633bc5de306040518163ffffffff1660e01b8152600401600060405180830381865afa1580156200086c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019062000897919062001cdd565b905080838381518110620008b057620008af62001a41565b5b6020026020010181905250508080620008c99062001d5d565b91505062000755565b506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156200099657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116200094b575b505050505090506040518060400160405280838152602001828152509250505090565b606060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000a1457600080fd5b600180548060200260200160405190810160405280929190818152602001828054801562000a9857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831162000a4d575b5050505050905090565b60606006805480602002602001604051908101604052809291908181526020016000905b8282101562000bb257838290600052602060002090600402016040518060800160405290816000820154815260200160018201805462000b0690620017c7565b80601f016020809104026020016040519081016040528092919081815260200182805462000b3490620017c7565b801562000b855780601f1062000b595761010080835404028352916020019162000b85565b820191906000526020600020905b81548152906001019060200180831162000b6757829003601f168201915b50505050508152602001600282015481526020016003820154815250508152602001906001019062000ac6565b50505050905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000c1457600080fd5b60006004600081548092919062000c2b9062001d5d565b91905055905060006040518060800160405280838152602001868152602001858152602001848152509050806005600084815260200190815260200160002060008201518160000155602082015181600101908162000c8b919062001f7c565b506040820151816002015560608201518160030155905050600681908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000155602082015181600101908162000cf0919062001f7c565b50604082015181600201556060820151816003015550505050505050565b6060600083905060008390506000826040518060400160405280600181526020017f5f000000000000000000000000000000000000000000000000000000000000008152508360405160200162000d6893929190620020b0565b604051602081830303815290604052905080935050505092915050565b61170380620020e883390190565b604051806040016040528060608152602001606081525090565b60405180610140016040528060008152602001606081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000151581526020016000151581525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b62000e598162000e44565b811462000e6557600080fd5b50565b60008135905062000e798162000e4e565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000ed48262000e89565b810181811067ffffffffffffffff8211171562000ef65762000ef562000e9a565b5b80604052505050565b600062000f0b62000e30565b905062000f19828262000ec9565b919050565b600067ffffffffffffffff82111562000f3c5762000f3b62000e9a565b5b62000f478262000e89565b9050602081019050919050565b82818337600083830152505050565b600062000f7a62000f748462000f1e565b62000eff565b90508281526020810184848401111562000f995762000f9862000e84565b5b62000fa684828562000f54565b509392505050565b600082601f83011262000fc65762000fc562000e7f565b5b813562000fd884826020860162000f63565b91505092915050565b60008060006060848603121562000ffd5762000ffc62000e3a565b5b60006200100d8682870162000e68565b935050602084013567ffffffffffffffff81111562001031576200103062000e3f565b5b6200103f8682870162000fae565b925050604084013567ffffffffffffffff81111562001063576200106262000e3f565b5b620010718682870162000fae565b9150509250925092565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620010a8826200107b565b9050919050565b620010ba816200109b565b82525050565b6000602082019050620010d76000830184620010af565b92915050565b60008060408385031215620010f757620010f662000e3a565b5b600083013567ffffffffffffffff81111562001118576200111762000e3f565b5b620011268582860162000fae565b925050602083013567ffffffffffffffff8111156200114a576200114962000e3f565b5b620011588582860162000fae565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b62001199816200109b565b82525050565b6000620011ad83836200118e565b60208301905092915050565b6000602082019050919050565b6000620011d38262001162565b620011df81856200116d565b9350620011ec836200117e565b8060005b83811015620012235781516200120788826200119f565b97506200121483620011b9565b925050600181019050620011f0565b5085935050505092915050565b600060208201905081810360008301526200124c8184620011c6565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6200128b8162000e44565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015620012cd578082015181840152602081019050620012b0565b60008484015250505050565b6000620012e68262001291565b620012f281856200129c565b935062001304818560208601620012ad565b6200130f8162000e89565b840191505092915050565b60008115159050919050565b62001331816200131a565b82525050565b60006101408301600083015162001352600086018262001280565b50602083015184820360208601526200136c8282620012d9565b91505060408301518482036040860152620013888282620012d9565b91505060608301518482036060860152620013a48282620012d9565b9150506080830151620013bb60808601826200118e565b5060a0830151620013d060a08601826200118e565b5060c0830151620013e560c086018262001280565b5060e0830151620013fa60e086018262001280565b506101008301516200141161010086018262001326565b506101208301516200142861012086018262001326565b508091505092915050565b600062001441838362001337565b905092915050565b6000602082019050919050565b6000620014638262001254565b6200146f81856200125f565b935083602082028501620014838562001270565b8060005b85811015620014c55784840389528151620014a3858262001433565b9450620014b08362001449565b925060208a0199505060018101905062001487565b50829750879550505050505092915050565b600082825260208201905092915050565b6000620014f58262001162565b620015018185620014d7565b93506200150e836200117e565b8060005b83811015620015455781516200152988826200119f565b97506200153683620011b9565b92505060018101905062001512565b5085935050505092915050565b6000604083016000830151848203600086015262001571828262001456565b915050602083015184820360208601526200158d8282620014e8565b9150508091505092915050565b60006020820190508181036000830152620015b6818462001552565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060808301600083015162001604600086018262001280565b50602083015184820360208601526200161e8282620012d9565b915050604083015162001635604086018262001280565b5060608301516200164a606086018262001280565b508091505092915050565b6000620016638383620015ea565b905092915050565b6000602082019050919050565b60006200168582620015be565b620016918185620015c9565b935083602082028501620016a585620015da565b8060005b85811015620016e75784840389528151620016c5858262001655565b9450620016d2836200166b565b925060208a01995050600181019050620016a9565b50829750879550505050505092915050565b6000602082019050818103600083015262001715818462001678565b905092915050565b60008060006060848603121562001739576200173862000e3a565b5b600084013567ffffffffffffffff8111156200175a576200175962000e3f565b5b620017688682870162000fae565b93505060206200177b8682870162000e68565b92505060406200178e8682870162000e68565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620017e057607f821691505b602082108103620017f657620017f562001798565b5b50919050565b600082825260208201905092915050565b7f54656d706c61746520646f6573206e6f74206578697374000000000000000000600082015250565b600062001845601783620017fc565b915062001852826200180d565b602082019050919050565b60006020820190508181036000830152620018788162001836565b9050919050565b7f496e7375726564206d7573742070617920746865207072656d69756d00000000600082015250565b6000620018b7601c83620017fc565b9150620018c4826200187f565b602082019050919050565b60006020820190508181036000830152620018ea81620018a8565b9050919050565b620018fc8162000e44565b82525050565b60006200190f8262001291565b6200191b8185620017fc565b93506200192d818560208601620012ad565b620019388162000e89565b840191505092915050565b6000610100820190506200195b600083018b620018f1565b81810360208301526200196f818a62001902565b9050818103604083015262001985818962001902565b905081810360608301526200199b818862001902565b9050620019ac6080830187620010af565b620019bb60a0830186620010af565b620019ca60c0830185620018f1565b620019d960e0830184620018f1565b9998505050505050505050565b600081905092915050565b6000620019fe8262001291565b62001a0a8185620019e6565b935062001a1c818560208601620012ad565b80840191505092915050565b600062001a368284620019f1565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b60008151905062001a8b8162000e4e565b92915050565b600062001aa862001aa28462000f1e565b62000eff565b90508281526020810184848401111562001ac75762001ac662000e84565b5b62001ad4848285620012ad565b509392505050565b600082601f83011262001af45762001af362000e7f565b5b815162001b0684826020860162001a91565b91505092915050565b62001b1a816200109b565b811462001b2657600080fd5b50565b60008151905062001b3a8162001b0f565b92915050565b62001b4b816200131a565b811462001b5757600080fd5b50565b60008151905062001b6b8162001b40565b92915050565b6000610140828403121562001b8b5762001b8a62001a70565b5b62001b9861014062000eff565b9050600062001baa8482850162001a7a565b600083015250602082015167ffffffffffffffff81111562001bd15762001bd062001a75565b5b62001bdf8482850162001adc565b602083015250604082015167ffffffffffffffff81111562001c065762001c0562001a75565b5b62001c148482850162001adc565b604083015250606082015167ffffffffffffffff81111562001c3b5762001c3a62001a75565b5b62001c498482850162001adc565b606083015250608062001c5f8482850162001b29565b60808301525060a062001c758482850162001b29565b60a08301525060c062001c8b8482850162001a7a565b60c08301525060e062001ca18482850162001a7a565b60e08301525061010062001cb88482850162001b5a565b6101008301525061012062001cd08482850162001b5a565b6101208301525092915050565b60006020828403121562001cf65762001cf562000e3a565b5b600082015167ffffffffffffffff81111562001d175762001d1662000e3f565b5b62001d258482850162001b71565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062001d6a8262000e44565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820362001d9f5762001d9e62001d2e565b5b600182019050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830262001e0e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262001dcf565b62001e1a868362001dcf565b95508019841693508086168417925050509392505050565b6000819050919050565b600062001e5d62001e5762001e518462000e44565b62001e32565b62000e44565b9050919050565b6000819050919050565b62001e798362001e3c565b62001e9162001e888262001e64565b84845462001ddc565b825550505050565b600090565b62001ea862001e99565b62001eb581848462001e6e565b505050565b5b8181101562001edd5762001ed160008262001e9e565b60018101905062001ebb565b5050565b601f82111562001f2c5762001ef68162001daa565b62001f018462001dbf565b8101602085101562001f11578190505b62001f2962001f208562001dbf565b83018262001eba565b50505b505050565b600082821c905092915050565b600062001f516000198460080262001f31565b1980831691505092915050565b600062001f6c838362001f3e565b9150826002028217905092915050565b62001f878262001291565b67ffffffffffffffff81111562001fa35762001fa262000e9a565b5b62001faf8254620017c7565b62001fbc82828562001ee1565b600060209050601f83116001811462001ff4576000841562001fdf578287015190505b62001feb858262001f5e565b8655506200205b565b601f198416620020048662001daa565b60005b828110156200202e5784890151825560018201915060208501945060208101905062002007565b868310156200204e57848901516200204a601f89168262001f3e565b8355505b6001600288020188555050505b505050505050565b600081519050919050565b600081905092915050565b6000620020868262002063565b6200209281856200206e565b9350620020a4818560208601620012ad565b80840191505092915050565b6000620020be828662002079565b9150620020cc828562002079565b9150620020da828462002079565b915081905094935050505056fe60806040523480156200001157600080fd5b506040516200170338038062001703833981810160405281019062000037919062000397565b8760008001819055508660006001019081620000549190620006fe565b508560006002019081620000699190620006fe565b5084600060030190816200007e9190620006fe565b5083600060040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600060050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600060060181905550806000600701819055506001600060080160006101000a81548160ff02191690831515021790555060008060080160016101000a81548160ff0219169083151502179055505050505050505050620007e5565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6200018d8162000178565b81146200019957600080fd5b50565b600081519050620001ad8162000182565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200020882620001bd565b810181811067ffffffffffffffff821117156200022a5762000229620001ce565b5b80604052505050565b60006200023f62000164565b90506200024d8282620001fd565b919050565b600067ffffffffffffffff82111562000270576200026f620001ce565b5b6200027b82620001bd565b9050602081019050919050565b60005b83811015620002a85780820151818401526020810190506200028b565b60008484015250505050565b6000620002cb620002c58462000252565b62000233565b905082815260208101848484011115620002ea57620002e9620001b8565b5b620002f784828562000288565b509392505050565b600082601f830112620003175762000316620001b3565b5b815162000329848260208601620002b4565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200035f8262000332565b9050919050565b620003718162000352565b81146200037d57600080fd5b50565b600081519050620003918162000366565b92915050565b600080600080600080600080610100898b031215620003bb57620003ba6200016e565b5b6000620003cb8b828c016200019c565b985050602089015167ffffffffffffffff811115620003ef57620003ee62000173565b5b620003fd8b828c01620002ff565b975050604089015167ffffffffffffffff81111562000421576200042062000173565b5b6200042f8b828c01620002ff565b965050606089015167ffffffffffffffff81111562000453576200045262000173565b5b620004618b828c01620002ff565b9550506080620004748b828c0162000380565b94505060a0620004878b828c0162000380565b93505060c06200049a8b828c016200019c565b92505060e0620004ad8b828c016200019c565b9150509295985092959890939650565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200051057607f821691505b602082108103620005265762000525620004c8565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620005907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000551565b6200059c868362000551565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620005df620005d9620005d38462000178565b620005b4565b62000178565b9050919050565b6000819050919050565b620005fb83620005be565b620006136200060a82620005e6565b8484546200055e565b825550505050565b600090565b6200062a6200061b565b62000637818484620005f0565b505050565b5b818110156200065f576200065360008262000620565b6001810190506200063d565b5050565b601f821115620006ae5762000678816200052c565b620006838462000541565b8101602085101562000693578190505b620006ab620006a28562000541565b8301826200063c565b50505b505050565b600082821c905092915050565b6000620006d360001984600802620006b3565b1980831691505092915050565b6000620006ee8383620006c0565b9150826002028217905092915050565b6200070982620004bd565b67ffffffffffffffff811115620007255762000724620001ce565b5b620007318254620004f7565b6200073e82828562000663565b600060209050601f83116001811462000776576000841562000761578287015190505b6200076d8582620006e0565b865550620007dd565b601f19841662000786866200052c565b60005b82811015620007b05784890151825560018201915060208501945060208101905062000789565b86831015620007d05784890151620007cc601f891682620006c0565b8355505b6001600288020188555050505b505050505050565b610f0e80620007f56000396000f3fe60806040526004361061003f5760003560e01c80633a0132c7146100445780633bc5de301461004e57806373d4a13a14610079578063a75ac608146100ad575b600080fd5b61004c6100b7565b005b34801561005a57600080fd5b506100636101a4565b6040516100709190610a8f565b60405180910390f35b34801561008557600080fd5b5061008e610475565b6040516100a49a99989796959493929190610b28565b60405180910390f35b6100b56106a9565b005b600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461011457600080fd5b600060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6000600601549081150290604051600060405180830381858888f19350505050158015610184573d6000803e3d6000fd5b5060008060080160006101000a81548160ff021916908315150217905550565b6101ac61081f565b600060405180610140016040529081600082015481526020016001820180546101d490610c08565b80601f016020809104026020016040519081016040528092919081815260200182805461020090610c08565b801561024d5780601f106102225761010080835404028352916020019161024d565b820191906000526020600020905b81548152906001019060200180831161023057829003601f168201915b5050505050815260200160028201805461026690610c08565b80601f016020809104026020016040519081016040528092919081815260200182805461029290610c08565b80156102df5780601f106102b4576101008083540402835291602001916102df565b820191906000526020600020905b8154815290600101906020018083116102c257829003601f168201915b505050505081526020016003820180546102f890610c08565b80601f016020809104026020016040519081016040528092919081815260200182805461032490610c08565b80156103715780601f1061034657610100808354040283529160200191610371565b820191906000526020600020905b81548152906001019060200180831161035457829003601f168201915b505050505081526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160068201548152602001600782015481526020016008820160009054906101000a900460ff161515151581526020016008820160019054906101000a900460ff161515151581525050905090565b600080600001549080600101805461048c90610c08565b80601f01602080910402602001604051908101604052809291908181526020018280546104b890610c08565b80156105055780601f106104da57610100808354040283529160200191610505565b820191906000526020600020905b8154815290600101906020018083116104e857829003601f168201915b50505050509080600201805461051a90610c08565b80601f016020809104026020016040519081016040528092919081815260200182805461054690610c08565b80156105935780601f1061056857610100808354040283529160200191610593565b820191906000526020600020905b81548152906001019060200180831161057657829003601f168201915b5050505050908060030180546105a890610c08565b80601f01602080910402602001604051908101604052809291908181526020018280546105d490610c08565b80156106215780601f106105f657610100808354040283529160200191610621565b820191906000526020600020905b81548152906001019060200180831161060457829003601f168201915b5050505050908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060060154908060070154908060080160009054906101000a900460ff16908060080160019054906101000a900460ff1690508a565b600060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461070657600080fd5b600060080160009054906101000a900460ff1661072257600080fd5b600060080160019054906101000a900460ff161561073f57600080fd5b600060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6000600701549081150290604051600060405180830381858888f193505050501580156107af573d6000803e3d6000fd5b506001600060080160016101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f3e2fd14d58008bf39b7103c57c9624a791d3f3f50b4483830d28dd2afa1cfc8560006040516108159190610eb6565b60405180910390a2565b60405180610140016040528060008152602001606081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000151581526020016000151581525090565b6000819050919050565b6108b5816108a2565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156108f55780820151818401526020810190506108da565b60008484015250505050565b6000601f19601f8301169050919050565b600061091d826108bb565b61092781856108c6565b93506109378185602086016108d7565b61094081610901565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109768261094b565b9050919050565b6109868161096b565b82525050565b60008115159050919050565b6109a18161098c565b82525050565b6000610140830160008301516109c060008601826108ac565b50602083015184820360208601526109d88282610912565b915050604083015184820360408601526109f28282610912565b91505060608301518482036060860152610a0c8282610912565b9150506080830151610a21608086018261097d565b5060a0830151610a3460a086018261097d565b5060c0830151610a4760c08601826108ac565b5060e0830151610a5a60e08601826108ac565b50610100830151610a6f610100860182610998565b50610120830151610a84610120860182610998565b508091505092915050565b60006020820190508181036000830152610aa981846109a7565b905092915050565b610aba816108a2565b82525050565b600082825260208201905092915050565b6000610adc826108bb565b610ae68185610ac0565b9350610af68185602086016108d7565b610aff81610901565b840191505092915050565b610b138161096b565b82525050565b610b228161098c565b82525050565b600061014082019050610b3e600083018d610ab1565b8181036020830152610b50818c610ad1565b90508181036040830152610b64818b610ad1565b90508181036060830152610b78818a610ad1565b9050610b876080830189610b0a565b610b9460a0830188610b0a565b610ba160c0830187610ab1565b610bae60e0830186610ab1565b610bbc610100830185610b19565b610bca610120830184610b19565b9b9a5050505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610c2057607f821691505b602082108103610c3357610c32610bd9565b5b50919050565b60008160001c9050919050565b6000819050919050565b6000610c63610c5e83610c39565b610c46565b9050919050565b60008190508160005260206000209050919050565b60008154610c8c81610c08565b610c9681866108c6565b94506001821660008114610cb15760018114610cc757610cfa565b60ff198316865281151560200286019350610cfa565b610cd085610c6a565b60005b83811015610cf257815481890152600182019150602081019050610cd3565b808801955050505b50505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d36610d3183610c39565b610d03565b9050919050565b600060ff82169050919050565b6000610d5d610d5883610c39565b610d3d565b9050919050565b60008160081c9050919050565b6000610d84610d7f83610d64565b610d3d565b9050919050565b600061014083016000808401549050610da381610c50565b610db060008701826108ac565b50600184018583036020870152610dc78382610c7f565b925050600284018583036040870152610de08382610c7f565b925050600384018583036060870152610df98382610c7f565b92505060048401549050610e0c81610d23565b610e19608087018261097d565b5060058401549050610e2a81610d23565b610e3760a087018261097d565b5060068401549050610e4881610c50565b610e5560c08701826108ac565b5060078401549050610e6681610c50565b610e7360e08701826108ac565b5060088401549050610e8481610d4a565b610e92610100870182610998565b50610e9c81610d71565b610eaa610120870182610998565b50819250505092915050565b60006020820190508181036000830152610ed08184610d8b565b90509291505056fea2646970667358221220a613046b9386efb869979a9462d8d0bd900e7b7a65406579143142383f7da8cf64736f6c63430008130033a2646970667358221220a37bb8cd09ce4f854746d146722183a75364037418028b1e1fd7ca15b2dd52fd64736f6c63430008130033";

    public static final String FUNC_CREATEINSURANCETEMPLATE = "createInsuranceTemplate";

    public static final String FUNC_GETDEPLOYEDINSURANCES = "getDeployedInsurances";

    public static final String FUNC_GETDEPLOYEDINSURANCESBYFLIGHT = "getDeployedInsurancesByFlight";

    public static final String FUNC_GETINSURANCETEMPLATES = "getInsuranceTemplates";

    public static final String FUNC_GETMYINSURANCES = "getMyInsurances";

    public static final String FUNC_MANAGER = "manager";

    public static final String FUNC_PURCHASETRAVELINSURANCE = "purchaseTravelInsurance";

    @Deprecated
    protected TravelInsuranceFactory(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected TravelInsuranceFactory(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected TravelInsuranceFactory(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected TravelInsuranceFactory(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> createInsuranceTemplate(String _name, BigInteger _premium, BigInteger _payoutAmount) {
        final Function function = new Function(
                FUNC_CREATEINSURANCETEMPLATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.generated.Uint256(_premium), 
                new org.web3j.abi.datatypes.generated.Uint256(_payoutAmount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> getDeployedInsurances() {
        final Function function = new Function(FUNC_GETDEPLOYEDINSURANCES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getDeployedInsurancesByFlight(String _flightNumber, String _departureTime) {
        final Function function = new Function(FUNC_GETDEPLOYEDINSURANCESBYFLIGHT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_flightNumber), 
                new org.web3j.abi.datatypes.Utf8String(_departureTime)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getInsuranceTemplates() {
        final Function function = new Function(FUNC_GETINSURANCETEMPLATES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<InsuranceTemplate>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getMyInsurances() {
        final Function function = new Function(FUNC_GETMYINSURANCES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<TravelInsuranceData>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<String> manager() {
        final Function function = new Function(FUNC_MANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> purchaseTravelInsurance(BigInteger _templateId, String _flightNumber, String _departureTime, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_PURCHASETRAVELINSURANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_templateId), 
                new org.web3j.abi.datatypes.Utf8String(_flightNumber), 
                new org.web3j.abi.datatypes.Utf8String(_departureTime)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    @Deprecated
    public static TravelInsuranceFactory load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new TravelInsuranceFactory(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static TravelInsuranceFactory load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new TravelInsuranceFactory(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static TravelInsuranceFactory load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new TravelInsuranceFactory(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static TravelInsuranceFactory load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new TravelInsuranceFactory(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<TravelInsuranceFactory> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(TravelInsuranceFactory.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<TravelInsuranceFactory> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(TravelInsuranceFactory.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<TravelInsuranceFactory> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(TravelInsuranceFactory.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<TravelInsuranceFactory> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(TravelInsuranceFactory.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class InsuranceTemplate extends DynamicStruct {
        public BigInteger id;

        public String name;

        public BigInteger premium;

        public BigInteger payoutAmount;

        public InsuranceTemplate(BigInteger id, String name, BigInteger premium, BigInteger payoutAmount) {
            super(new org.web3j.abi.datatypes.generated.Uint256(id), 
                    new org.web3j.abi.datatypes.Utf8String(name), 
                    new org.web3j.abi.datatypes.generated.Uint256(premium), 
                    new org.web3j.abi.datatypes.generated.Uint256(payoutAmount));
            this.id = id;
            this.name = name;
            this.premium = premium;
            this.payoutAmount = payoutAmount;
        }

        public InsuranceTemplate(Uint256 id, Utf8String name, Uint256 premium, Uint256 payoutAmount) {
            super(id, name, premium, payoutAmount);
            this.id = id.getValue();
            this.name = name.getValue();
            this.premium = premium.getValue();
            this.payoutAmount = payoutAmount.getValue();
        }
    }

    public static class TravelInsuranceData extends DynamicStruct {
        public BigInteger templateId;

        public String templateName;

        public String flightNumber;

        public String departureTime;

        public String insurer;

        public String insured;

        public BigInteger premium;

        public BigInteger payoutAmount;

        public Boolean isActive;

        public Boolean isPaidOut;

        public TravelInsuranceData(BigInteger templateId, String templateName, String flightNumber, String departureTime, String insurer, String insured, BigInteger premium, BigInteger payoutAmount, Boolean isActive, Boolean isPaidOut) {
            super(new org.web3j.abi.datatypes.generated.Uint256(templateId), 
                    new org.web3j.abi.datatypes.Utf8String(templateName), 
                    new org.web3j.abi.datatypes.Utf8String(flightNumber), 
                    new org.web3j.abi.datatypes.Utf8String(departureTime), 
                    new org.web3j.abi.datatypes.Address(160, insurer), 
                    new org.web3j.abi.datatypes.Address(160, insured), 
                    new org.web3j.abi.datatypes.generated.Uint256(premium), 
                    new org.web3j.abi.datatypes.generated.Uint256(payoutAmount), 
                    new org.web3j.abi.datatypes.Bool(isActive), 
                    new org.web3j.abi.datatypes.Bool(isPaidOut));
            this.templateId = templateId;
            this.templateName = templateName;
            this.flightNumber = flightNumber;
            this.departureTime = departureTime;
            this.insurer = insurer;
            this.insured = insured;
            this.premium = premium;
            this.payoutAmount = payoutAmount;
            this.isActive = isActive;
            this.isPaidOut = isPaidOut;
        }

        public TravelInsuranceData(Uint256 templateId, Utf8String templateName, Utf8String flightNumber, Utf8String departureTime, Address insurer, Address insured, Uint256 premium, Uint256 payoutAmount, Bool isActive, Bool isPaidOut) {
            super(templateId, templateName, flightNumber, departureTime, insurer, insured, premium, payoutAmount, isActive, isPaidOut);
            this.templateId = templateId.getValue();
            this.templateName = templateName.getValue();
            this.flightNumber = flightNumber.getValue();
            this.departureTime = departureTime.getValue();
            this.insurer = insurer.getValue();
            this.insured = insured.getValue();
            this.premium = premium.getValue();
            this.payoutAmount = payoutAmount.getValue();
            this.isActive = isActive.getValue();
            this.isPaidOut = isPaidOut.getValue();
        }
    }
}

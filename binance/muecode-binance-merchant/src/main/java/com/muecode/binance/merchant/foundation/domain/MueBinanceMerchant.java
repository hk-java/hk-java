package com.muecode.binance.merchant.foundation.domain;

import org.springframework.http.HttpHeaders;
import com.muecode.binance.merchant.foundation.common.MueMac;
import lombok.extern.slf4j.Slf4j;

/**
 * content-type string Y application/json BinancePay-Timestamp long Y UnixTimestamp in milliseconds
 * that the requ... BinancePay-Nonce string Y A random string generated by merchants. M...
 * BinancePay-Certificate-SN string Y API Key generated in Binance Merchant Admin Portal
 * BinancePay-Signature string Y API Signature. Please see the next step for ...
 */
@Slf4j
public final class MueBinanceMerchant {

  private String apiKey;

  private String apiSecret;

  public MueBinanceMerchant(String apiKey, String apiSecret) {
    this.apiKey = apiKey;
    this.apiSecret = apiSecret;
  }

  public HttpHeaders computeHttpHeader(String nonce, long binanceServerTime,
      String requestJsonString) {
    // UnixTimestamp in milliseconds
    // String requestTimeStamp = String.valueOf(new Date().getTime() / 1000L);
    String requestTimeStamp = String.valueOf(binanceServerTime);
    // UUID, ignore Hyphens, 32 digits
    // String nonce = MueUUID.randomUUID().toStringIgnoreHyphens();
    HttpHeaders headers = new HttpHeaders();
    headers.add("content-type", "application/json");
    headers.add("BinancePay-Timestamp", requestTimeStamp);
    headers.add("BinancePay-Nonce", nonce);
    headers.add("BinancePay-Certificate-SN", apiKey);

    // log.info("apiKey={}, nonce={}, requestTimeStamp={}", apiKey, nonce, requestTimeStamp);
    String payload = computePayload(requestTimeStamp, nonce, requestJsonString);
    // log.info("payload={}, apiSecret={}", payload, apiSecret);

    // HmacSHA256, HmacSHA512, HmacSHA3-256, HmacSHA3-512
    String bPaySignature =
        MueMac.encrpytToHexString("HmacSHA512", apiSecret, payload).toUpperCase();

    // log.info("bPaySignature={}", bPaySignature);
    headers.add("BinancePay-Signature", bPaySignature);
    // log.info("headers={}", headers);
    return headers;
  }

  public static String computePayload(String timeStamp, String nonce, String body) {
    return new StringBuilder() //
        .append(timeStamp) //
        .append("\n") //
        .append(nonce) //
        .append("\n") //
        .append(body) //
        .append("\n") //
        .toString();
  }

}
